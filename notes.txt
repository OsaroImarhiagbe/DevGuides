   <FlatList
      data={DATA}
      keyExtractor={item => item.id}
      renderItem={({item}) => <Cards title={item.title}/>}
      ItemSeparatorComponent={Separator}/>
    </View>

                     <View style={styles.textContainer}>
        <TouchableOpacity onPress={() => console.log('forgot username pressed')}>
        <Text style={styles.text}>Forgot username</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => console.log('forgot password pressed')}>
        <Text style={styles.text}>Forgot password</Text>
        </TouchableOpacity>
    </View>



      useEffect(() => {
    fetchMessageHistory();
  }, [])


  const fetchMessageHistory = async () => {
    try {
      const response = await axios.get('http://192.168.86.41:3000/message-history');
      setMessages(response.data.messages);
    } catch (error) {
      console.error('Error fetching message history:', error);
    }
  };


  const onSend = async (newMessages = []) => {
    try {
      // Send new message to backend
      const response = await axios.post('http://192.168.86.41:3000/send-message', {
        message: newMessages[0],
      });
      // Update local message state with the new message
      setMessages((prevMessages) => GiftedChat.append(prevMessages, response.data.message));
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };


   const io = new Server();
        io.on('connection', (socket) => {
        console.log(' Socket server Client connected');
        // Handle incoming messages
        socket.on('message', (message) => {
            console.log('Received message:', message);
            // Broadcast the message to all connected clients
            io.emit('message', message);
        });
        // Handle disconnections
        socket.on('disconnect', () => {
            console.log(' Socket Client disconnected');
        });
        });


          <ListItem
          title={item.userName}
          subTitle={item.description}
          image={item.image}
          onPress={() => navigation.navigate('Chat',{userName: item.userName})}
          renderRightActions={() => 
          <ListItemDelete onPress={ () => handleDelete(item)}/>}
          renderLeftActions={() => (
            <TouchableOpacity onPress={() => console.log('archived pressed')}>   
              <View
            style={{
              width:70,
              backgroundColor:'blue',
              height:'100%',
              justifyContent:'center',
              alignItems:'center'
            }}
            ><Text style={styles.text}>Archive</Text></View></TouchableOpacity>
       
          )}
        />


        onPress={() => navigation.navigate('Chat',{userName: item.userName})}
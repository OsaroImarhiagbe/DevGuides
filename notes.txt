   <FlatList
      data={DATA}
      keyExtractor={item => item.id}
      renderItem={({item}) => <Cards title={item.title}/>}
      ItemSeparatorComponent={Separator}/>
    </View>

                     <View style={styles.textContainer}>
        <TouchableOpacity onPress={() => console.log('forgot username pressed')}>
        <Text style={styles.text}>Forgot username</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => console.log('forgot password pressed')}>
        <Text style={styles.text}>Forgot password</Text>
        </TouchableOpacity>
    </View>



      useEffect(() => {
    fetchMessageHistory();
  }, [])


  const fetchMessageHistory = async () => {
    try {
      const response = await axios.get('http://192.168.86.41:3000/message-history');
      setMessages(response.data.messages);
    } catch (error) {
      console.error('Error fetching message history:', error);
    }
  };


  const onSend = async (newMessages = []) => {
    try {
      // Send new message to backend
      const response = await axios.post('http://192.168.86.41:3000/send-message', {
        message: newMessages[0],
      });
      // Update local message state with the new message
      setMessages((prevMessages) => GiftedChat.append(prevMessages, response.data.message));
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };


   const io = new Server();
        io.on('connection', (socket) => {
        console.log(' Socket server Client connected');
        // Handle incoming messages
        socket.on('message', (message) => {
            console.log('Received message:', message);
            // Broadcast the message to all connected clients
            io.emit('message', message);
        });
        // Handle disconnections
        socket.on('disconnect', () => {
            console.log(' Socket Client disconnected');
        });
        });


          <ListItem
          title={item.userName}
          subTitle={item.description}
          image={item.image}
          onPress={() => navigation.navigate('Chat',{userName: item.userName})}
          renderRightActions={() => 
          <ListItemDelete onPress={ () => handleDelete(item)}/>}
          renderLeftActions={() => (
            <TouchableOpacity onPress={() => console.log('archived pressed')}>   
              <View
            style={{
              width:70,
              backgroundColor:'blue',
              height:'100%',
              justifyContent:'center',
              alignItems:'center'
            }}
            ><Text style={styles.text}>Archive</Text></View></TouchableOpacity>
       
          )}
        />


        onPress={() => navigation.navigate('Chat',{userName: item.userName})}

         <View style={styles.screen}>
          <GiftedChat
    messages={messages}
    onSend={messages => onSend(messages)}
    user={{
      _id: 1,
    }}
    textInputStyle={styles.text}
    alwaysShowSend
    renderSend={renderSend}
    scrollToBottom
    isTyping={true}
  />
      </View>
  
      socket.on('message',(newMessage) => {
        setMessages((previousMessages) => {
        GiftedChat.append(previousMessages,newMessage)
      })})
    }catch(error){
      console.error(`${error}`)
    }
  }

  const onSend = useCallback((messages = []) => {
    setMessages(previousMessages =>
      GiftedChat.append(previousMessages, messages),
    )

    const newMessage = messages[0]

    sendMessgae(newMessage)
  }, [])


  const sendMessgae = async (newMessage) => {
    try{
      const response = await axios.post('http://localhost:3000/send-message' ,{
        message: newMessage,
        name: route.params.userName})
      console.log('Message sent:', response.data)
    }catch(error){
      console.error(`${error}`)
    }
  }



  const renderSend = (props) => {
    return (
      <Send
      {...props}
      >
        <View>
          <MaterialCommunityIcons
          style={{ marginBottom:10, marginRight:10}}
          name='send-circle'
          size={32}
          color='#2e64e5'/>
        </View>
      </Send>
    )
  }

    const [messages, setMessages] = useState([])
  const [allChatMessage, setAllChatMessage] = useState([])

  // useEffect(() => {
  //   setMessages([
  //     {
  //       _id: 1,
  //       text: 'Hello developer',
  //       createdAt: new Date(),
  //       user: {
  //         _id: 2,
  //         name: 'React Native',
  //         avatar: 'https://placeimg.com/140/140/any',
  //       },
  //     },
  //   ])
  // }, [])

  useEffect(() => {
    clientSide();
  },[])

 


  const clientSide = () => {// creating client connection
    try{


            // socket.on('userId',(userid)=> {
            //     SocketMap[userid] = socket
            // })
          
            // socket.on('message',async (data) => {

            //     // try{
            //     //     const {senderUserId, receipentUserID, message} = data;

            //     //     await MessageCollection.insertOne({senderUserId,receipentUserID,message});
            //     //     const recipentSocket = SocketMap[receipentUserID];
            //     //     if(receipentUserID){
            //     //         recipentSocket.emit('newMessage',{senderUserId,message})
            //     //     }
            //     // }catch(error){
            //     //     console.error(`${error}`)
            //     // }
            
                
            // })
            // Handle disconnections
            // socket.on('disconnect', () => {
            //     console.log(' Socket Client disconnected');
            // });
